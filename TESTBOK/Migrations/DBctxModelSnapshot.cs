// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TESTBOK.Models;

namespace TESTBOK.Migrations
{
    [DbContext(typeof(DBctx))]
    partial class DBctxModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TESTBOK.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Leader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfWeeks")
                        .HasColumnType("int");

                    b.Property<int>("PeriodicId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StopTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = 1,
                            Activity = "Lektion",
                            BookingDate = new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = "Arne",
                            NumberOfWeeks = 1,
                            PeriodicId = 0,
                            ResourceId = 4,
                            StartDate = new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2021, 1, 5, 13, 15, 0, 0, DateTimeKind.Unspecified),
                            StopTime = new DateTime(2021, 1, 5, 15, 15, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            BookingId = 2,
                            Activity = "Musik",
                            BookingDate = new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = "Berit",
                            NumberOfWeeks = 3,
                            PeriodicId = 1,
                            ResourceId = 4,
                            StartDate = new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2021, 1, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StopTime = new DateTime(2021, 1, 5, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            BookingId = 3,
                            Activity = "Musik",
                            BookingDate = new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = "Berit",
                            NumberOfWeeks = 3,
                            PeriodicId = 1,
                            ResourceId = 4,
                            StartDate = new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2021, 1, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StopTime = new DateTime(2021, 1, 12, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            BookingId = 4,
                            Activity = "Musik",
                            BookingDate = new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = "Berit",
                            NumberOfWeeks = 3,
                            PeriodicId = 1,
                            ResourceId = 4,
                            StartDate = new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2021, 1, 19, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StopTime = new DateTime(2021, 1, 19, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            BookingId = 5,
                            Activity = "Dans",
                            BookingDate = new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = "Clas",
                            NumberOfWeeks = 3,
                            PeriodicId = 1,
                            ResourceId = 4,
                            StartDate = new DateTime(2021, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2021, 1, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StopTime = new DateTime(2021, 1, 6, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            BookingId = 6,
                            Activity = "Dans",
                            BookingDate = new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = "Clas",
                            NumberOfWeeks = 3,
                            PeriodicId = 1,
                            ResourceId = 4,
                            StartDate = new DateTime(2021, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2021, 1, 13, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StopTime = new DateTime(2021, 1, 13, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            BookingId = 7,
                            Activity = "Dans",
                            BookingDate = new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = "Clas",
                            NumberOfWeeks = 3,
                            PeriodicId = 1,
                            ResourceId = 4,
                            StartDate = new DateTime(2021, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2021, 1, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StopTime = new DateTime(2021, 1, 20, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            BookingId = 8,
                            Activity = "Lektion",
                            BookingDate = new DateTime(2021, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = "Berit",
                            NumberOfWeeks = 1,
                            PeriodicId = 0,
                            ResourceId = 5,
                            StartDate = new DateTime(2021, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2021, 1, 6, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            StopTime = new DateTime(2021, 1, 6, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            BookingId = 9,
                            Activity = "Workshop",
                            BookingDate = new DateTime(2021, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = "Berit",
                            NumberOfWeeks = 1,
                            PeriodicId = 0,
                            ResourceId = 5,
                            StartDate = new DateTime(2021, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2021, 1, 6, 13, 15, 0, 0, DateTimeKind.Unspecified),
                            StopTime = new DateTime(2021, 1, 6, 15, 15, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            BookingId = 10,
                            Activity = "Woodchop",
                            BookingDate = new DateTime(2020, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = "Danne",
                            NumberOfWeeks = 1,
                            PeriodicId = 0,
                            ResourceId = 9,
                            StartDate = new DateTime(2020, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2020, 12, 30, 13, 15, 0, 0, DateTimeKind.Unspecified),
                            StopTime = new DateTime(2020, 12, 30, 15, 15, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("TESTBOK.Models.Resource", b =>
                {
                    b.Property<int>("ResId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Bookable")
                        .HasColumnType("bit");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("ResId");

                    b.HasIndex("UnitId");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            ResId = 1,
                            Activity = "",
                            Bookable = true,
                            Info = "*Ej angett",
                            ResName = "Café",
                            Size = 0,
                            UnitId = 1
                        },
                        new
                        {
                            ResId = 2,
                            Activity = "Keramik",
                            Bookable = true,
                            Info = "Keramik",
                            ResName = "Keramik",
                            Size = 0,
                            UnitId = 1
                        },
                        new
                        {
                            ResId = 3,
                            Activity = "Tyst läsrum våning 1",
                            Bookable = true,
                            Info = "Teorisal",
                            ResName = "Sal 11",
                            Size = 10,
                            UnitId = 1
                        },
                        new
                        {
                            ResId = 4,
                            Activity = "Lektionssal",
                            Bookable = true,
                            Info = "Teorisal",
                            ResName = "Sal 13",
                            Size = 8,
                            UnitId = 1
                        },
                        new
                        {
                            ResId = 5,
                            Activity = "Föreläsningssal (40p bio)",
                            Bookable = true,
                            Info = "Teorisal",
                            ResName = "Sal 17",
                            Size = 25,
                            UnitId = 1
                        },
                        new
                        {
                            ResId = 6,
                            Activity = "Lektionssal",
                            Bookable = true,
                            Info = "Teorisal",
                            ResName = "Sal 18",
                            Size = 20,
                            UnitId = 1
                        },
                        new
                        {
                            ResId = 7,
                            Activity = "Lektionssal",
                            Bookable = true,
                            Info = "Teorisal",
                            ResName = "Sal 25",
                            Size = 15,
                            UnitId = 1
                        },
                        new
                        {
                            ResId = 8,
                            Activity = "Silversmide",
                            Bookable = true,
                            Info = "Silversmide",
                            ResName = "Silver",
                            Size = 10,
                            UnitId = 1
                        },
                        new
                        {
                            ResId = 9,
                            Activity = "Träslöjd",
                            Bookable = true,
                            Info = "Träslöjd",
                            ResName = "Träslöjd",
                            Size = 10,
                            UnitId = 1
                        },
                        new
                        {
                            ResId = 10,
                            Activity = "Mötessal",
                            Bookable = true,
                            Info = "Stor sal",
                            ResName = "Stor sal",
                            Size = 10,
                            UnitId = 2
                        },
                        new
                        {
                            ResId = 11,
                            Activity = "Teater",
                            Bookable = true,
                            Info = "Stor sal",
                            ResName = "Teater",
                            Size = 0,
                            UnitId = 3
                        },
                        new
                        {
                            ResId = 12,
                            Activity = "Mötesrum",
                            Bookable = true,
                            Info = "Mötesrum på 3e vån i Redbergsskolan",
                            ResName = "Mötesrum",
                            Size = 0,
                            UnitId = 6
                        },
                        new
                        {
                            ResId = 13,
                            Activity = "Resursbil",
                            Bookable = true,
                            Info = "Lilla bilen",
                            ResName = "VW E-UP",
                            Size = 0,
                            UnitId = 5
                        },
                        new
                        {
                            ResId = 14,
                            Activity = "Teorisal",
                            Bookable = true,
                            Info = "Lektionssal",
                            ResName = "sal 1",
                            Size = 15,
                            UnitId = 4
                        });
                });

            modelBuilder.Entity("TESTBOK.Models.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitId");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            UnitId = 1,
                            Address = "Örngatan 6",
                            Description = "",
                            ShortName = "RES",
                            UnitName = "Redbergsskolan"
                        },
                        new
                        {
                            UnitId = 2,
                            Address = "Ånäsvägen 33",
                            Description = "",
                            ShortName = "ÅNÄS",
                            UnitName = "Ånässkolan"
                        },
                        new
                        {
                            UnitId = 3,
                            Address = "Örngatan 6",
                            Description = "Teatern",
                            ShortName = "RET",
                            UnitName = "Redbergsteatern"
                        },
                        new
                        {
                            UnitId = 4,
                            Address = "Karl Gustavsgatan 15-17",
                            Description = "Vasastan",
                            ShortName = "KGG",
                            UnitName = "Karl Gustavsgatan"
                        },
                        new
                        {
                            UnitId = 5,
                            Address = "Örngatan 6",
                            Description = "",
                            ShortName = "BIL",
                            UnitName = "Bilar"
                        },
                        new
                        {
                            UnitId = 6,
                            Address = "Örngatan 6",
                            Description = "",
                            ShortName = "MÖT",
                            UnitName = "Mötesrum"
                        },
                        new
                        {
                            UnitId = 7,
                            Address = "Örngatan 6",
                            Description = "Bokningsbara resurser såsom mobila datasalen eller liknande",
                            ShortName = "ÖVR",
                            UnitName = "Annat bokningsbart"
                        },
                        new
                        {
                            UnitId = 8,
                            Address = "Lillatorpsgatan 10",
                            Description = "",
                            ShortName = "LL10",
                            UnitName = "Lillatorpsgatan 10"
                        },
                        new
                        {
                            UnitId = 9,
                            Address = "Brahegatan 11",
                            Description = "",
                            ShortName = "HHA",
                            UnitName = "HipHopAkademi"
                        });
                });

            modelBuilder.Entity("TESTBOK.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodicColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SingleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserPermission")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            FirstName = "Christian",
                            PeriodicColor = "#E2DA38",
                            SingleColor = "#AC7244",
                            UserName = "Admin",
                            UserRoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            FirstName = "Normal",
                            PeriodicColor = "#ED2B0E",
                            SingleColor = "#960981",
                            UserName = "User",
                            UserRoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            FirstName = "Booker",
                            PeriodicColor = "#172DEF",
                            SingleColor = "#3ABC12",
                            UserName = "Booker",
                            UserRoleId = 2
                        });
                });

            modelBuilder.Entity("TESTBOK.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("TESTBOK.Models.Booking", b =>
                {
                    b.HasOne("TESTBOK.Models.Resource", "Resource")
                        .WithMany("Bookings")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TESTBOK.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TESTBOK.Models.Resource", b =>
                {
                    b.HasOne("TESTBOK.Models.Unit", "Unit")
                        .WithMany("Resources")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TESTBOK.Models.User", b =>
                {
                    b.HasOne("TESTBOK.Models.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
